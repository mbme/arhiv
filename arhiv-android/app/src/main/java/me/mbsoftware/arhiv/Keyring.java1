package me.mbsoftware.arhiv;

import android.content.Context;
import android.content.SharedPreferences;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.util.Base64;

import androidx.biometric.BiometricPrompt;
import androidx.core.content.ContextCompat;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;

import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.util.Arrays;
import java.util.concurrent.Executor;

public class Keyring {
  private static final String KEYSTORE_ALIAS = "ArhivKeystore";
  private static final String SHARED_PREFS_NAME = "ArhivPrefs";
  private static final String PASSWORD_KEY = "encrypted_password";
  private static final int GCM_IV_LENGTH = 12;
  private static final int GCM_TAG_LENGTH = 128;

  public static void generateKey() throws Exception {
    if (keyExists()) return; // Prevent key regeneration

    KeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore");
    keyGenerator.init(new KeyGenParameterSpec.Builder(
      KEYSTORE_ALIAS,
      KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
      .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
      .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
      .setUserAuthenticationRequired(true) // Biometric protection
      .setKeySize(256)
      .build());
    keyGenerator.generateKey();
  }

  public static void savePassword(Context context, String password) throws Exception {
    Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
    cipher.init(Cipher.ENCRYPT_MODE, getSecretKey());

    byte[] iv = cipher.getIV();
    byte[] encrypted = cipher.doFinal(password.getBytes(StandardCharsets.UTF_8));

    byte[] combined = new byte[iv.length + encrypted.length];
    System.arraycopy(iv, 0, combined, 0, iv.length);
    System.arraycopy(encrypted, 0, combined, iv.length, encrypted.length);

    SharedPreferences prefs = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE);
    prefs.edit().putString(PASSWORD_KEY, Base64.encodeToString(combined, Base64.DEFAULT)).apply();
  }

  public static String loadPassword(Context context, BiometricPrompt.AuthenticationCallback callback) {
    SharedPreferences prefs = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE);
    String storedData = prefs.getString(PASSWORD_KEY, null);
    if (storedData == null) return null;

    Executor executor = ContextCompat.getMainExecutor(context);
    BiometricPrompt biometricPrompt = new BiometricPrompt(
      (androidx.fragment.app.FragmentActivity) context,
      executor,
      callback
    );

    BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
      .setTitle("Authenticate")
      .setSubtitle("Use biometrics to decrypt password")
      .setNegativeButtonText("Cancel")
      .build();

    biometricPrompt.authenticate(promptInfo, new BiometricPrompt.CryptoObject(getCipherForDecryption(storedData)));
  }

  private static Cipher getCipherForDecryption(String encryptedData) throws Exception {
      byte[] combined = Base64.decode(encryptedData, Base64.DEFAULT);
      byte[] iv = Arrays.copyOfRange(combined, 0, GCM_IV_LENGTH);

      Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
      cipher.init(Cipher.DECRYPT_MODE, getSecretKey(), new GCMParameterSpec(GCM_TAG_LENGTH, iv));
      return cipher;
  }

  private static SecretKey getSecretKey() throws Exception {
    KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
    keyStore.load(null);
    return ((KeyStore.SecretKeyEntry) keyStore.getEntry(KEYSTORE_ALIAS, null)).getSecretKey();
  }

  private static boolean keyExists() throws Exception {
    KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
    keyStore.load(null);
    return keyStore.containsAlias(KEYSTORE_ALIAS);
  }
}
